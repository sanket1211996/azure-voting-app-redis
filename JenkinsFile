pipeline {
    agent any

    stages {
        stage('Verify  Branch') {
            steps {
                echo "$GIT_BRANCH"
            }
        }
        stage('Docker Build') {
         steps {
            sh(script: 'docker images -a')
            sh(script: """
               cd azure-vote/
               docker images -a
               docker build -t jenkins-pipeline .
               docker images -a
               cd ..
            """)
         }
      }
      stage('Start test app') {
         steps {
            sh(script: """
               docker-compose up -d
            """)
         }
         post {
            success {
               echo "App started successfully :)"
            }
            failure {
               echo "App failed to start :("
            }
         }
      }
      stage('Stop test app') {
         steps {
            sh(script: """
               docker-compose down
            """)
         }
      }
      stage('Push Container') {
         steps {
            echo "workspace is $WORKSPACE"
            dir("$WORKSPACE/azure-vote") {
               script {
                  // Need Docker Pipeline plugin
                  docker.withRegistry('https://index.docker.io/v1/','DockerHub') {
                     def image = docker.build('sdarwant/jenkins-course:latest')
                     image.push()
                  }
               }
            }
         }
      }
      stage('Container Scanning') {
         parallel {
            stage('Run Anchore') {
               sleep(time: 1, unit: 'SECONDS')
               // steps {
               //    pwsh(script: """
               //       Write-Output "blackdentech/jenkins-course" > anchore_images
               //    """)
               //    anchore bailOnFail: false, bailOnPluginFail: false, name: 'anchore_images'
               // }
            }
            stage('Run Trivy') {
               steps {
                  sh(script: """
                     trivy sdarwant/jenkins-course
                  """)
               }
            }
         }
      }




    }
}
